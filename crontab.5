.\" Man page for ncron
.\"
.\" Copyright (c) 2004-2014 Nicholas J. Kain
.\"
.TH crontab 5 "April 29, 2014"
.LO 1
.SH NAME
crontab \- ncron configuration file
.SH DESCRIPTION
.B crontab
specifies job commands, intervals, and constraints.  Additionally, rlimits
and chroot paths may be specified for jobs.

.SH "FILE FORMAT"
.nf
JOBID := integer
UNIT := "s", "m", "h", "d", "w"
INTERVAL := integer(NOT integer OR NOT UNIT)[UNIT][INTERVAL]
IPAIR := integer,integer OR integer
JOB :=
	!JOBID
	command=string
	chroot=string
	user=string
	group=string
	path=string
	minute=IPAIR
	hour=IPAIR
	weekday=IPAIR
	day=IPAIR
	month=IPAIR
	interval=INTERVAL
	l_cpu=IPAIR
	l_fsize=IPAIR
	l_data=IPAIR
	l_stack=IPAIR
	l_core=IPAIR
	l_rss=IPAIR
	l_nproc=IPAIR
	l_nofile=IPAIR
	l_memlock=IPAIR
	l_as=IPAIR
	journal
	maxruns=integer
	runat=integer
	
config file :=
	JOB
	...
	JOB
	!0
.fi
.PP
A !0 must terminate the file, otherwise the last job will not
be used.  Multiple constraints are allowed, but serve only to
permit additional ranges in which jobs may be run (in other words,
they are implicitly unioned).
.PP
The default location for configure files is /var/lib/ncron/crontab.

.SH KEYWORDS
.TP
command=STRING
Specifies the full path to a command, followed by any arguments that
should be passed to the command.
.TP
chroot=STRING
If present, ncron will force the spawned job into a chroot whose path
corresponds to the argument of the chroot keyword. This keyword only has an
effect if ncron is being run uid root.  Otherwise, it will prevent job
invocation entirely.
.TP
user=STRING
The user name of the account that the specified job should run under.  This
command only makes sense if ncron is running uid root on systems with standard
UNIX DAC.
.TP
group=STRING
The group name of the account that the specified job should run under.  This
command only makes sense if ncron is running uid root on systems with standard
UNIX DAC.
path=STRING
If present, customizes the value of the PATH environment variable in the
spawned process.  It should be in a format identical to that used by
unix shells (eg, path1:path2:path3).
.TP
.TP
minute=RANGE
Specifies a comma delimited range of minutes within which the job may run.
Valid minutes are within the interval [0,59].  Ranges will be interpreted
modulo 60.  In other words, ncron will properly understand ranges such as 40,20
as being "after the 39th minute of an hour or before the 21st minute of an
hour, but not between".  Multiple ranges will be unioned together.
.TP
hour=RANGE
As above.  Valid hours are within the interval [0,23], interpreted modulo 24.
.TP
weekday=RANGE
As above.  Valid weekdays are within the range [1,7], where 1 corresponds to
Saturday and 7 maps to Sunday.
.TP
day=RANGE
As above.  Valid days are within the range [1,31].
.TP
month=RANGE
As above.  Valid months are within the range [1,12].
.TP
interval=SECONDS
The time that must elapse between invocations of the job.  In practice,
constraints may force a wait longer than the time specified by the interval.
Any number before a valid unit (s,m,h,d) == (seconds, minutes, hours, days)
will be associated with the next valid unit specifier.  Multiple units are
allowed to be in sequence and will be implicitly added.  No unit specifier (a
bare number) implies a unit of seconds.
.TP
l_cpu=SOFTLIM,HARDLIM
Corresponds with a rlimit. The first integer in the pair is the softlimit for
the resource. The second is the hard limit. Only root may change hardlimits or
set softlimits above the current hardlimit. Values of 0 will be treated as an
infinite limit. If no l_* statement is made, current values for rlimits will
not be changed.
.TP
l_fsize=HARDLIM,SOFTLIM
As above.
.TP
l_data=HARDLIM,SOFTLIM
As above.
.TP
l_stack=HARDLIM,SOFTLIM
As above.
.TP
l_core=HARDLIM,SOFTLIM
As above.
.TP
l_rss=HARDLIM,SOFTLIM
As above.
.TP
l_nproc=HARDLIM,SOFTLIM
As above.
.TP
l_nofile=HARDLIM,SOFTLIM
As above.
.TP
l_memlock=HARDLIM,SOFTLIM
As above.
.TP
l_as=HARDLIM,SOFTLIM
As above.
.TP
l_msgqueue=HARDLIM,SOFTLIM
As above.
.TP
l_nice=HARDLIM,SOFTLIM
As above.
.TP
l_rttime=HARDLIM,SOFTLIM
As above.
.TP
l_rtprio=HARDLIM,SOFTLIM
As above.
.TP
l_sigpending=HARDLIM,SOFTLIM
As above.
.TP
journal
ncron will save execution times and number of runs after each run of this job.
Useful for very critical tasks. If your machine is horribly unstable, I would
suggest using the "execmode" argument to ncron rather than manually forcing
every job to be journalled in the configuration file.
.TP
maxruns=INTEGER
Maximum number of times that a job will be run. The number of runs for a job is
accounted for between invocations of ncron. A value of zero denotes no limit.
.TP
runat=TIME
ncron will run the specified job only one time, at a time greater than or equal
to the time (in seconds since epoch) passed as an argument to runat. The job
will implicitly be journalled.  "interval" is obviously meaningless if this
keyword is to be used, and should be omitted for human readability (although
ncron does not care). This keyword allows ncron to act as an atd as well as a
crond.
.PP
Note that for all constraints, values outside of valid ranges will be treated
as wildcards.
.PP
Multiple ranges of the same type may be used and will be OR'ed together by the
daemon. In other words, "weekday=1" and "weekday=4" in the same job would read
as "run this task on either Sunday or Wednesday".
.PP
Ranges that are not continuous ([x,y] where x>y rather than x<y) are treated as
continuous ranges modulo the base of the unit of time. EG, [45,15] in minutes
would correspond to "run this task in the last quarter of an hour or in the
first quarter of an hour".
.SH EXAMPLE
.nf
!1
command=ls -laF
user=bob
group=users
day=10
interval=1h
!0
.fi
.PP
This job will run "ls -laF" in ncron's working directory as user:group
bob:users hourly on the 10th day of every month.
.SH "SEE ALSO"
ncron(1).
.SH LIMITATIONS
Constraints may not vary as a function of other constraint values (eg, it is
not possible to express unique weekday constraints for each month). This
limitation is unlikely to be removed. It would be a major change for little
gain and greatly increased program and config file format complexity.
.SH TIPS
The "runat" keyword allows ncron to function as either a cron daemon (which
runs tasks at periodic intervals of time) or an at daemon (which runs tasks at
defined times).
.PP
ncron is also designed to run effectively as either a single uid-root daemon,
multiplexing between multiple user accounts, or as a per-user cron daemon, with
one daemon for each user account.  Both models run efficiently, but have
different administrative and security characteristics.
.SH AUTHOR
Nicholas J. Kain <njkain (at) gmail.com>

